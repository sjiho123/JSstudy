//심볼형
//자바스크립트는 객체 프로퍼티 키로 오직 문자형과 심볼형만을 허용합니다. 숫자형 블린형 모두 불가능하고 오직 문자형과 심볼형만 가능하죠.

//지금까지는 프로퍼티 키가 문자형인 경우만 살펴보았습니다. 이번 챕터에선 프로퍼티 키로 심볼값을 사용해보면서
// 심볼형 키를 사용할 때의 이점에 대해 살펴보도록 하겠습니다.

// 심볼
// 심볼(symbol)은 유일한 식별자(unique identifier)를 만들고 싶을때 사용합니다.

// symbol()을 사용하면 심볼값을 만들 수 있습니다.

// id는 새로운 심볼이 됩니다.
let id = Symbol();

//심볼 id에는 "id"라는 설명이 붙습니다.
let id = Symbol("id");

//심볼은 유일성이 보장되는 자료형이기 때문에, 설명이 동일한 심볼을 여러개 만들어도 각 심볼값은 다릅니다.
//심볼에 붙이는 설명(심볼 이름)은 어떤 것에도 영향을 주지않는 이름표 역활만을 합니다.

//설명이 같은 심볼 두 개를 만들고 이를 비교해보겠습니다. 
//동일 연산자(==)로 비교시 false가 반환되는 것을 확인할 수 있습니다.

let id1 = Symbol("id");
let id2 = Symbol("id");

alert(id1 == id2); //false

//참고로 Ruby등의 언어에서도 심볼과 유사한 개념을 사용하는데 자바 스크립트의 심볼은 이들 언어에 쓰이는 심볼과는 다르기 때문에 혼동하지 마시길 바랍니다

//심볼은 문자형으로 자동 형 변환되지 않습니다.
//자바 스크립트에선 문자형으로의 암시작 형 변환이 비교적 자유롭게 일어납니다. alert함수가 거의 모든 값을 인자로 받을 수 있는 이유가 이 때문이죠.
//그러나 심볼은 예외입니다. 심볼형 값은 다른 자료형으로 암시적 형 변환이 되지 않습니다.

//아래 예시애서 alert는 에러를 발생시킵니다

let id = Symbol("id");
alert(id); //TypeError : Cannot convert a Symbol value to a string

//문자열과 심볼은 근본이 다르기 때문에 우연히라도 서로의 타입으로 변환돼선 안됩니다. 자바스크립트에선 ' 언어 차원의 보호장치를 마련해 심볼형이 다른 형으로 변환되지 않게 막아줍니다.
// 심볼을 반드시 출력해줘야하는 상황이라미녀 아래와같이 .toString() 메서드를 명시적으로 호출해주면 됩니다

let id = Symbol("id");
alert(id.toString());

// Symbol.description 프로퍼티를 이용하면 설명만 보여주는 것도 가능합니다

let id = Symbol("id");
alert(id.description);

//숨김 프로퍼티
//심볼을 이용하면 숨김 프로퍼티를 만들수 있습니다. 숨김 프로퍼티는 외부코드에서 접근이 불가능하고 값도 덮어쓸수없는 프로퍼티입니다

//서드파티 코드에서 가져온 user라는 객체가 여러개 있고, user를 이용해 어떤 작업을 해야하는 상황이라고 가정해봅시다.user에 식별자를 붙여주도록 합시다.
//식별자는 심볼을 이용해 만들도록 하겠습니다.

let user = {
    name : John
};

let id = Symbol("id");

user[id] = 1;

alert(user[id]);

//심볼은 유일성이 보장되므로 우리가 만든 식별자와 제 3의 스크립트에서 만든 식별자가 충돌하지 않습니다.
// 이름이 같더라도 말이죠.

//만약 심볼 대신 문자열 "id"를 사용해 식별자를 만들었다면 충돌이 발생할 가능성이 있습니다.

let user = {name: "John"};

//문자열 "id"를 사용해 식별자를 만들었습니다.
user.id = "스크립트 id 값";

//만약 제 3의 스크립트가 우리 스크립트와 동일하게 문자열 "id"를 이용해 식별자를 만들었다면.

user.id = "제 3의 스크립트 id 값"
//의도치 않게 값이 덮어 씌여서 우리가 만든 식별자는 무의미해집니다

//symbols in a literal

//객체 리터럴{...}을 사용해 객체를 만든 경우, 대괄호를 사용해 심볼형 키를 만들어야 합니다.

let id = Symbol("id");

let user = {
    name:"John",
    [id]:123 //"id": 123은 안됨
}





